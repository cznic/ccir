// Code generated by running "go generate". DO NOT EDIT.

	// +build ignore
	
	// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

typedef unsigned int size_t ;
typedef int ssize_t ;
typedef size_t rsize_t ;
typedef int intptr_t ;
typedef unsigned int uintptr_t ;
typedef int ptrdiff_t ;
typedef unsigned short wchar_t ;
typedef unsigned short wint_t ;
typedef unsigned short wctype_t ;
typedef int errno_t ;
typedef long __time32_t ;
typedef long long __time64_t ;
typedef __time32_t time_t ;
struct threadlocaleinfostruct ;
struct threadmbcinfostruct ;
typedef struct threadlocaleinfostruct *pthreadlocinfo ;
typedef struct threadmbcinfostruct *pthreadmbcinfo ;
struct __lc_time_data ;
typedef struct localeinfo_struct {pthreadlocinfo locinfo ;pthreadmbcinfo mbcinfo ;}_locale_tstruct ;
typedef struct localeinfo_struct {pthreadlocinfo locinfo ;pthreadmbcinfo mbcinfo ;}*_locale_t ;

typedef struct tagLC_ID {unsigned short wLanguage ;unsigned short wCountry ;unsigned short wCodePage ;}LC_ID ;
typedef struct tagLC_ID {unsigned short wLanguage ;unsigned short wCountry ;unsigned short wCodePage ;}*LPLC_ID ;

typedef struct threadlocaleinfostruct {int refcount ;unsigned int lc_codepage ;unsigned int lc_collate_cp ;unsigned long lc_handle [6 ];LC_ID lc_id [6 ];struct {char *locale ;wchar_t *wlocale ;int *refcount ;int *wrefcount ;}lc_category [6 ];int lc_clike ;int mb_cur_max ;int *lconv_intl_refcount ;int *lconv_num_refcount ;int *lconv_mon_refcount ;struct lconv *lconv ;int *ctype1_refcount ;unsigned short *ctype1 ;const unsigned short *pctype ;const unsigned char *pclmap ;const unsigned char *pcumap ;struct __lc_time_data *lc_time_curr ;}threadlocinfo ;
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

uintptr_t _beginthread (void (*_StartAddress )(void *),unsigned _StackSize ,void *_ArgList );
void _endthread (void );
uintptr_t _beginthreadex (void *_Security ,unsigned _StackSize ,unsigned (*_StartAddress )(void *),void *_ArgList ,unsigned _InitFlag ,unsigned *_ThrdAddr );
void _endthreadex (unsigned _Retval );
void exit (int _Code );
void _exit (int _Code );
void _Exit (int );
void abort (void );
void _cexit (void );
void _c_exit (void );
int _getpid (void );
intptr_t _cwait (int *_TermStat ,intptr_t _ProcHandle ,int _Action );
intptr_t _execl (const char *_Filename ,const char *_ArgList ,...);
intptr_t _execle (const char *_Filename ,const char *_ArgList ,...);
intptr_t _execlp (const char *_Filename ,const char *_ArgList ,...);
intptr_t _execlpe (const char *_Filename ,const char *_ArgList ,...);
intptr_t _execv (const char *_Filename ,const char *const *_ArgList );
intptr_t _execve (const char *_Filename ,const char *const *_ArgList ,const char *const *_Env );
intptr_t _execvp (const char *_Filename ,const char *const *_ArgList );
intptr_t _execvpe (const char *_Filename ,const char *const *_ArgList ,const char *const *_Env );
intptr_t _spawnl (int _Mode ,const char *_Filename ,const char *_ArgList ,...);
intptr_t _spawnle (int _Mode ,const char *_Filename ,const char *_ArgList ,...);
intptr_t _spawnlp (int _Mode ,const char *_Filename ,const char *_ArgList ,...);
intptr_t _spawnlpe (int _Mode ,const char *_Filename ,const char *_ArgList ,...);
intptr_t _spawnv (int _Mode ,const char *_Filename ,const char *const *_ArgList );
intptr_t _spawnve (int _Mode ,const char *_Filename ,const char *const *_ArgList ,const char *const *_Env );
intptr_t _spawnvp (int _Mode ,const char *_Filename ,const char *const *_ArgList );
intptr_t _spawnvpe (int _Mode ,const char *_Filename ,const char *const *_ArgList ,const char *const *_Env );
int system (const char *_Command );
intptr_t _wexecl (const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wexecle (const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wexeclp (const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wexeclpe (const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wexecv (const wchar_t *_Filename ,const wchar_t *const *_ArgList );
intptr_t _wexecve (const wchar_t *_Filename ,const wchar_t *const *_ArgList ,const wchar_t *const *_Env );
intptr_t _wexecvp (const wchar_t *_Filename ,const wchar_t *const *_ArgList );
intptr_t _wexecvpe (const wchar_t *_Filename ,const wchar_t *const *_ArgList ,const wchar_t *const *_Env );
intptr_t _wspawnl (int _Mode ,const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wspawnle (int _Mode ,const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wspawnlp (int _Mode ,const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wspawnlpe (int _Mode ,const wchar_t *_Filename ,const wchar_t *_ArgList ,...);
intptr_t _wspawnv (int _Mode ,const wchar_t *_Filename ,const wchar_t *const *_ArgList );
intptr_t _wspawnve (int _Mode ,const wchar_t *_Filename ,const wchar_t *const *_ArgList ,const wchar_t *const *_Env );
intptr_t _wspawnvp (int _Mode ,const wchar_t *_Filename ,const wchar_t *const *_ArgList );
intptr_t _wspawnvpe (int _Mode ,const wchar_t *_Filename ,const wchar_t *const *_ArgList ,const wchar_t *const *_Env );
int _wsystem (const wchar_t *_Command );
void __security_init_cookie (void );
void __security_check_cookie (uintptr_t _StackCookie );
void __report_gsfailure (void );
extern uintptr_t __security_cookie ;
intptr_t _loaddll (char *_Filename );
int _unloaddll (intptr_t _Handle );
int (*_getdllprocaddr (intptr_t _Handle ,char *_ProcedureName ,intptr_t _Ordinal ))(void );
intptr_t cwait (int *_TermStat ,intptr_t _ProcHandle ,int _Action );
intptr_t execl (const char *_Filename ,const char *_ArgList ,...);
intptr_t execle (const char *_Filename ,const char *_ArgList ,...);
intptr_t execlp (const char *_Filename ,const char *_ArgList ,...);
intptr_t execlpe (const char *_Filename ,const char *_ArgList ,...);
intptr_t spawnl (int ,const char *_Filename ,const char *_ArgList ,...);
intptr_t spawnle (int ,const char *_Filename ,const char *_ArgList ,...);
intptr_t spawnlp (int ,const char *_Filename ,const char *_ArgList ,...);
intptr_t spawnlpe (int ,const char *_Filename ,const char *_ArgList ,...);
int getpid (void );
intptr_t execv (const char *_Filename ,char *const _ArgList []);
intptr_t execve (const char *_Filename ,char *const _ArgList [],char *const _Env []);
intptr_t execvp (const char *_Filename ,char *const _ArgList []);
intptr_t execvpe (const char *_Filename ,char *const _ArgList [],char *const _Env []);
intptr_t spawnv (int ,const char *_Filename ,char *const _ArgList []);
intptr_t spawnve (int ,const char *_Filename ,char *const _ArgList [],char *const _Env []);
intptr_t spawnvp (int ,const char *_Filename ,char *const _ArgList []);
intptr_t spawnvpe (int ,const char *_Filename ,char *const _ArgList [],char *const _Env []);
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(__ret_type, __ret_policy, __decl_spec, __name, __sec_name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1) 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _CRT_SYSTEM_DEFINED 
#define _SPAWNV_DEFINED 
#define _WAIT_CHILD (0)
#define P_WAIT _P_WAIT
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(__ret, __func, __dsttype, __dst, __type1, __arg1, __type2, __arg2, __type3, __arg3) 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _CRT_GETPID_DEFINED 
#define _P_NOWAITO (3)
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define _CRTNOALIAS 
#define _ERRCODE_DEFINED 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(__ret, __func, __dsttype, __dst, __type1, __arg1) 
#define _INC_CRTDEFS 
#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX(__ret_type, __ret_policy, __decl_spec, __name, __sec_name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1, __arg2_type, __arg2) 
#define _TIME64_T_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _OLD_P_OVERLAY (2)
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(__ret_type, __ret_policy, __decl_spec, __name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1) __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX ( __ret_type , __ret_policy , __decl_spec , __func_name , __func_name ## _s , __dst_attr , __dst_type , __dst , __arg1_type , __arg1 , __arg2_type , __arg2 )
#define _PTRDIFF_T_ 
#define _WCHAR_T_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _WSPAWN_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define _RSIZE_T_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _CRT_WSYSTEM_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3(__ret_type, __ret_policy, __decl_spec, __name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1, __arg2_type, __arg2, __arg3_type, __arg3) __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX ( __ret_type , __ret_policy , __decl_spec , __func_name , __func_name ## _s , __dst_attr , __dst_type , __dst , __arg1_type , __arg1 , __arg2_type , __arg2 , __arg3_type , __arg3 )
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define P_DETACH _P_DETACH
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define _INTPTR_T_DEFINED 
#define _CRT_SECURE_CPP_NOTHROW throw ( )
#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_3_EX(__ret_type, __ret_policy, __decl_spec, __name, __sec_name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1, __arg2_type, __arg2, __arg3_type, __arg3) 
#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2(__ret_type, __ret_policy, __decl_spec, __name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1, __arg2_type, __arg2) __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_2_EX ( __ret_type , __ret_policy , __decl_spec , __func_name , __func_name ## _s , __dst_attr , __dst_type , __dst , __arg1_type , __arg1 , __arg2_type , __arg2 )
#define _CRT_PACKING (8)
#define _CRTRESTRICT 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _P_WAIT (0)
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(__ret, __func, __dsttype, __dst, __type1, __arg1, __type2, __arg2) 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_4(__ret, __func, __dsttype, __dst, __type1, __arg1, __type2, __arg2, __type3, __arg3, __type4, __arg4) 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _P_NOWAIT (1)
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(__ret, __func, __vfunc, __dsttype, __dst, __type1, __arg1, __type2, __arg2) 
#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0(__ret_type, __ret_policy, __decl_spec, __name, __dst_attr, __dst_type, __dst) __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX ( __ret_type , __ret_policy , __decl_spec , __func_name , __func_name ## _s , __dst_attr , __dst_type , __dst )
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_3(__ret, __func, __type0, __arg0, __dsttype, __dst, __type1, __arg1, __type2, __arg2, __type3, __arg3) 
#define _PTRDIFF_T_DEFINED 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_2(__ret, __func, __type0, __arg0, __dsttype, __dst, __type1, __arg1, __type2, __arg2) 
#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX(__ret_type, __ret_policy, __decl_spec, __name, __sec_name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1, __arg2_type, __arg2, __arg3_type, __arg3, __arg4_type, __arg4) 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _WEXEC_DEFINED 
#define _P_OVERLAY (2)
#define _WAIT_GRANDCHILD (1)
#define _CRT_TERMINATE_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define _THREADLOCALEINFO 
#define __uintptr_t_defined 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_0(__ret, __func, __dsttype, __dst) 
#define _TIME_T_DEFINED 
#define __intptr_t_defined 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_2_0(__ret, __func, __type1, __arg1, __type2, __arg2, __dsttype, __dst) 
#define __crt_typefix(ctype) 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_1_1(__ret, __func, __type0, __arg0, __dsttype, __dst, __type1, __arg1) 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define P_NOWAITO _P_NOWAITO
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define _WCTYPE_T_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define _P_DETACH (4)
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4(__ret_type, __ret_policy, __decl_spec, __name, __dst_attr, __dst_type, __dst, __arg1_type, __arg1, __arg2_type, __arg2, __arg3_type, __arg3, __arg4_type, __arg4) __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_4_EX ( __ret_type , __ret_policy , __decl_spec , __func_name , __func_name ## _s , __dst_attr , __dst_type , __dst , __arg1_type , __arg1 , __arg2_type , __arg2 , __arg3_type , __arg3 , __arg4_type , __arg4 )
#define _WINT_T 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define OLD_P_OVERLAY _OLD_P_OVERLAY
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\crtdefs.h 

#define _SSIZE_T_DEFINED 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(__ret, __func, __vfunc, __dsttype, __dst, __type1, __arg1) 
#define __DEFINE_CPP_OVERLOAD_SECURE_FUNC_SPLITPATH(__ret, __func, __dsttype, __src) 
#define _TIME32_T_DEFINED 
#define _UINTPTR_T_DEFINED 
#define _TAGLC_ID_DEFINED 
#define __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_0_EX(__ret_type, __ret_policy, __decl_spec, __name, __sec_name, __dst_attr, __dst_type, __dst) 
#define _SIZE_T_DEFINED 
// BEGIN OF FILE m:\mingw\x86_64-w64-mingw32\include\process.h 

#define WAIT_GRANDCHILD _WAIT_GRANDCHILD
#define P_OVERLAY _P_OVERLAY
#define P_NOWAIT _P_NOWAIT
#define _INC_PROCESS 
#define WAIT_CHILD _WAIT_CHILD
